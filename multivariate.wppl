var sBPM = 33.10
var uBPM = 126.28
var uTimbre = 4.29
var sTimbre = 5.95
var uHotness = 0.39
var sHotness = 0.33
var uLoudness = -7.81
var sLoudness = 4.21
var uYear = 2001
var sYear = 7.97
var means = Vector([uBPM, uTimbre, uHotness, uLoudness, uYear])
var covs = Matrix([[sBPM*sBPM, 0, 0, 0, 0],
                   [0, sTimbre*sTimbre, 0, 0, 0],
                   [0, 0, sHotness*sHotness, 0, 0],
                   [0, 0, 0, sLoudness*sLoudness, 0],
                   [0, 0, 0, 0, sYear*sYear]])

var exp_score = function(f, means) {
  return 100*Math.exp(-((f[0] - means[0])*(f[0] - means[0])/(sBPM*sBPM) + 
                           (f[1] - means[1])*(f[1] - means[1])/(sTimbre*sTimbre) + 
                           (f[2] - means[2])*(f[2] - means[2])/(sHotness*sHotness) + 
                           (f[3] - means[3])*(f[3] - means[3])/(sLoudness*sLoudness) + 
                           (f[4] - means[4])*(f[4] - means[4])/(sYear*sYear)))
}

var model = function() {
  var kernel = function(prevVal) {
    return MultivariateGaussian({mu: prevVal, cov: covs});
  }
  var userFavourite = sample(MultivariateGaussian({mu: means, cov: covs}), {driftKernel: kernel})
  var noise = sample(Exponential({a:1}))
  
  var ratingDistAt = function(fv) {
    return Gaussian({
//       mu: 10*Math.exp(-100*((userFavourite.data["0"] - fv.data["0"])*(userFavourite.data["0"] - fv.data["0"]) + 
//                         (userFavourite.data["1"] - fv.data["1"])*(userFavourite.data["1"] - fv.data["1"]) + 
//                         (userFavourite.data["2"] - fv.data["2"])*(userFavourite.data["2"] - fv.data["2"]) + 
//                         (userFavourite.data["3"] - fv.data["3"])*(userFavourite.data["3"] - fv.data["3"]) + 
//                         (userFavourite.data["4"] - fv.data["4"])*(userFavourite.data["4"] - fv.data["4"]))),
         mu: exp_score(userFavourite.data, fv.data),
//       mu: 10*Math.exp(-((userFavourite.data["0"] - fv[0]) + 
//                         (userFavourite.data["1"] - fv[1]))),
      sigma: 0.001
    })
  }

  observe(ratingDistAt(Vector([111.174, 5.356165660225442, 0.5923486321969242, -4.682, 2003.0])), 6)
  observe(ratingDistAt(Vector([163.898, 10.823037912912914, 0.0, -4.924, 2008.0])), 7)
  observe(ratingDistAt(Vector([113.061, 17.094832412060303, 0.0, -6.933, 1994.0])), 1)
  observe(ratingDistAt(Vector([125.03, 12.546672118380062, 0.0, -9.027, 1992.0])), 5)
  observe(ratingDistAt(Vector([163.733, 13.648020833333334, 0.0, -5.606, 2005.0])), 7)
  
  return userFavourite
}


var posterior = Infer({method:"MCMC", samples:1000, burn: 100000, lag:10}, model)
posterior.samples
var xs = map(function(v){
  return v['value']['data']["0"]
}, posterior.samples)
var ys = map(function(v){
  return v['value']['data']["1"]
}, posterior.samples)
viz.scatter(xs,ys)
// viz(posterior)
//print(sample(posterior))

var mapBPM = map(function(x) {return sample(posterior)['data'][0]}, _.range(10000))
var uBPM = listMean(mapBPM)

var mapTimbre = map(function(x) {return sample(posterior)['data'][1]}, _.range(10000))
var uTimbre = listMean(mapTimbre)

var mapHotness = map(function(x) {return sample(posterior)['data'][2]}, _.range(10000))
var uHotness = listMean(mapHotness)

var mapLoud = map(function(x) {return sample(posterior)['data'][3]}, _.range(10000))
var uLoud = listMean(mapLoud)

var mapYear = map(function(x) {return sample(posterior)['data'][4]}, _.range(10000))
var uYear = listMean(mapYear)

var means = [uBPM, uTimbre, uHotness, uLoud, uYear]

var test_song1 = [144.992, 4.237716309341501, 0.0, -4.334, 2009.0] //7
var test_song2 = [177.324, 6.896326352530541, 0.849758777872426, -3.856, 2005.0] //1
var test_song3 = [92.011, 4.535239693313223, 0.687557162898481, -4.374, 2007.0] //8
var test_song4 = [127.597, -6.06714430894309, 0.6627076416359741, -9.371, 2007.0] //4
var test_song5 = [143.987, 1.8598744855967078, 0.6411304524906364, -8.316, 2003.0] //5
print(exp_score(test_song1, means))
print(exp_score(test_song2, means))
print(exp_score(test_song3, means))
print(exp_score(test_song4, means))
print(exp_score(test_song5, means))
