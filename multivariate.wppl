var sBPM = 33.10
var uBPM = 126.28
var uTimbre = 4.29
var sTimbre = 5.95
var uHotness = 0.39
var sHotness = 0.33
var uLoudness = -7.81
var sLoudness = 4.21
var uYear = 2001
var sYear = 7.97
var means = Vector([uBPM, uTimbre, uHotness, uLoudness, uYear])
var covs = Matrix([[sBPM*sBPM, 23.11, 0.25, 26.78, -3.16],
                   [23.11, sTimbre*sTimbre, -0.14, 12.15, -2.42],
                   [0.25, -0.14, sHotness*sHotness, 0.17, 0.62],
                   [26.78, 12.15, 0.17, sLoudness*sLoudness, 9.41],
                   [-3.16, -2.42, 0.62, 9.41, sYear*sYear]])

var exp_score = function(f, means) {
  return 10*Math.exp(-0.1*((f[0] - means[0])*(f[0] - means[0])/(sBPM*sBPM) + 
                           (f[1] - means[1])*(f[1] - means[1])/(sTimbre*sTimbre) + 
                           (f[2] - means[2])*(f[2] - means[2])/(sHotness*sHotness) + 
                           (f[3] - means[3])*(f[3] - means[3])/(sLoudness*sLoudness) + 
                           (f[4] - means[4])*(f[4] - means[4])/(sYear*sYear)))
//   return -5*Math.tanh((0.025*((f[0] - means[0])*(f[0] - means[0])/(sBPM*sBPM) + 
//                            (f[1] - means[1])*(f[1] - means[1])/(sTimbre*sTimbre) + 
//                            (f[2] - means[2])*(f[2] - means[2])/(sHotness*sHotness) + 
//                            (f[3] - means[3])*(f[3] - means[3])/(sLoudness*sLoudness) + 
//                            (f[4] - means[4])*(f[4] - means[4])/(sYear*sYear))) -10) + 5
}

var model = function() {
  var kernel = function(prevVal) {
    return MultivariateGaussian({mu: prevVal, cov: covs});
  }
  var userFavourite = sample(MultivariateGaussian({mu: means, cov: covs}), {driftKernel: kernel})
  var noise = sample(Exponential({a:1}))
  
  var ratingDistAt = function(fv) {
   return Gaussian({
//         mu: 10*Math.exp(-100*((userFavourite.data["0"] - fv.data["0"])*(userFavourite.data["0"] - fv.data["0"]) + 
//                         (userFavourite.data["1"] - fv.data["1"])*(userFavourite.data["1"] - fv.data["1"]) + 
//                         (userFavourite.data["2"] - fv.data["2"])*(userFavourite.data["2"] - fv.data["2"]) + 
//                         (userFavourite.data["3"] - fv.data["3"])*(userFavourite.data["3"] - fv.data["3"]) + 
//                         (userFavourite.data["4"] - fv.data["4"])*(userFavourite.data["4"] - fv.data["4"]))),
    
    
     mu: exp_score(userFavourite.data, fv.data),
     sigma: 0.001
   })
  }

  
observe(ratingDistAt(Vector([152.145, 2.3072427956989245, 0.5, -7.338, 2002.0])), 7)
observe(ratingDistAt(Vector([147.802, 4.244118045112781, 0.5, -6.012, 2006.0])), 4)
observe(ratingDistAt(Vector([162.689, 8.173788235294117, 0.5082891059677606, -14.187, 1981.0])), 7)
observe(ratingDistAt(Vector([135.988, 12.83349133050248, 0.7865534054973415, -4.217, 2009.0])), 8)
observe(ratingDistAt(Vector([89.839, 7.729586100861009, 0.729256794107681, -7.998, 2007.0])), 3)
observe(ratingDistAt(Vector([105.007, 1.0852431077694238, 0.579038701159863, -4.765, 1996.0])), 3)
observe(ratingDistAt(Vector([168.013, 4.575070185395384, 0.5, -6.306, 2007.0])), 6)
observe(ratingDistAt(Vector([109.218, -5.230366726835139, 0.8199383637518962, -9.514, 1991.0])), 5)
observe(ratingDistAt(Vector([97.248, 3.107256034482759, 0.7299791910214264, -6.952, 2009.0])), 8)
observe(ratingDistAt(Vector([94.095, -10.273039884868421, 0.5637552083912959, -10.807, 2006.0])), 6)
  
  return userFavourite
}


var posterior = Infer({method:"MCMC", samples:1000, burn: 10000, lag:10}, model)
posterior.samples
var xs = map(function(v){
  return v['value']['data']["0"]
}, posterior.samples)
var ys = map(function(v){
  return v['value']['data']["1"]
}, posterior.samples)
viz.scatter(xs,ys,{xLabel: 'Tempo (BPM)', yLabel: 'Timbre'})

var mapBPM = map(function(x) {return sample(posterior)['data'][0]}, _.range(10000))
var uBPM = listMean(mapBPM)

var mapTimbre = map(function(x) {return sample(posterior)['data'][1]}, _.range(10000))
var uTimbre = listMean(mapTimbre)

var mapHotness = map(function(x) {return sample(posterior)['data'][2]}, _.range(10000))
var uHotness = listMean(mapHotness)

var mapLoud = map(function(x) {return sample(posterior)['data'][3]}, _.range(10000))
var uLoud = listMean(mapLoud)

var mapYear = map(function(x) {return sample(posterior)['data'][4]}, _.range(10000))
var uYear = listMean(mapYear)

var means = [uBPM, uTimbre, uHotness, uLoud, uYear]

var test_song1 = [121.388, -6.062389200998751, 0.89383122996871, -11.293, 1997.0] //4
var test_song2 = [183.511, 4.683208192090396, 0.5, -13.621, 1980.0] //3
var test_song3 = [159.586, 5.657182946773714, 0.7834403836154684, -12.975, 2002.0] //5
var test_song4 = [149.317, -12.769823307034848, 0.5949574301507565, -21.152, 2004.0] //5
var test_song5 = [141.968, 5.898772349505841, 0.7732153974353551, -3.826, 2008.0] //7


print(exp_score(test_song1, means))
print(exp_score(test_song2, means))
print(exp_score(test_song3, means))
print(exp_score(test_song4, means))
print(exp_score(test_song5, means))
//print(sample(posterior))
